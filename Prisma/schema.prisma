// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  username  String
  password  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model ClientProfiles {
  id              Int                @id @default(autoincrement())
  name            String
  email           String             
  company         String
  contactNumber   Int
  address         String
  staffSalary     SalaryCategory?    @relation(fields: [staffSalaryId], references: [id])
  staffSalaryId   Int
  gradeLevel      StaffCategory?     @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId    Int
  staffPosition   PositionsCategory? @relation(fields: [staffPositionId], references: [id])
  staffPositionId Int
  AdditionalCost  AdditionalCost[]
  ourPdf          OurPdf[]
  clientPdf       ClientPdf[]
}

model Deposit {
  id              Int           @id @default(autoincrement())
  deposit         Float
  staffCategory   StaffCategory @relation(fields: [staffCategoryId], references: [id])
  staffCategoryId Int
}

model StaffCategory {
  id              Int              @id @default(autoincrement())
  gradeLevel      Int
  seatingFee      SeatingFees?
  deposits        Deposit[]
  clients         ClientProfiles[]
  recruitmentFees RecruitmentFees?
}

model SeatingFees {
  id                 Int            @id @default(autoincrement())
  workstation        Float
  utilitiesAmenities Float
  itSupportHr        Float
  accountingPayRoll  Float
  staffGrade         StaffCategory? @relation(fields: [staffGradeId], references: [id])
  staffGradeId       Int            @unique
}

model SalaryCategory {
  id                 Int              @id @default(autoincrement())
  staffSalary        Float
  clients            ClientProfiles[]
  thirteenthMonthPay OtherPayments[]  @relation("ThirteenthMonthPay")
}

model PositionsCategory {
  id            Int              @id @default(autoincrement())
  staffPosition String
  clients       ClientProfiles[]
}

model RecruitmentFees {
  id              Int           @id @default(autoincrement())
  advertisement   Float
  recruitment     Float
  staffCategory   StaffCategory @relation(fields: [staffCategoryId], references: [id])
  staffCategoryId Int           @unique
}

model OtherPayments {
  id                   Int             @id @default(autoincrement())
  servicesPhone        Float
  computerUpgrade      Float
  optiCompTaxes        Float
  thirteenthMonthPay   SalaryCategory? @relation("ThirteenthMonthPay", fields: [thirteenthMonthPayId], references: [id])
  thirteenthMonthPayId Int?
  medicalInsurance     Float
  addCost              AdditionalCost? @relation("AddCost", fields: [addCostId], references: [id])
  addCostId            Int?
}

model TotalCost {
  id                Int   @id @default(autoincrement())
  totalDeposit      Float
  totalSeatingFee   Float
  totalSalary       Float
  totalRecruitment  Float
  totalOtherPayment Float
  totalYearlyCost   Float
}

model Cost {
  id               Int   @id @default(autoincrement())
  monthlyTotalCost Float
  yearlyTotalCost  Float
}

model Currency {
  id         Int   @id @default(autoincrement())
  country String
  currency Float
}

model AdditionalCost {
  id               Int             @id @default(autoincrement())
  name             String
  cost             Float
  addCost          OtherPayments[] @relation("AddCost")
  ClientProfiles   ClientProfiles? @relation(fields: [clientProfilesId], references: [id])
  clientProfilesId Int?
}


model OurPdf {
  id          Int         @id @default(autoincrement())
  filename    String?
  url         String?
  title       String?
  description String?
  size        Int?
  pdfBinaryData            Bytes?
  ourPdfClientProfiles      ClientProfiles? @relation(fields: [ourPdfClientProfilesId], references: [id])
  ourPdfClientProfilesId  Int
}

model ClientPdf {
  id          Int      @id @default(autoincrement())
  filename    String?
  url         String?
  title       String?
  description String?
  size        Int?
  pdfBinaryData            Bytes?
  clientPdfClientProfiles      ClientProfiles? @relation(fields: [clientPdfClientProfilesId], references: [id])
  clientPdfClientProfilesId  Int
}








